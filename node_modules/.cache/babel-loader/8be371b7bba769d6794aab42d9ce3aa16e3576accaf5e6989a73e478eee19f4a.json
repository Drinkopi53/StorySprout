{"ast":null,"code":"import API_CONFIG from './apiConfig';\nimport AgeCustomizationService from './AgeCustomizationService';\nclass StoryService {\n  // Generate a story based on user preferences\n  static async generateStory(storySettings) {\n    try {\n      // Get age-based settings\n      const ageSettings = AgeCustomizationService.getAgeSettings(storySettings.childAge);\n\n      // In a real implementation, we would call the Gemini API with these settings\n      // For now, we'll return a mock story\n      console.log('Generating story with settings:', storySettings);\n      console.log('Age settings:', ageSettings);\n\n      // Mock story data\n      const mockStory = {\n        title: `The Brave Little ${storySettings.childName || 'Explorer'}`,\n        content: \"Once upon a time, in a land filled with wonder, there lived a brave little adventurer. This character loved to explore and learn new things every day. One morning, they woke up to find a mysterious map under their pillow.\",\n        choices: [{\n          id: 1,\n          text: \"Follow the map to the Enchanted Forest\"\n        }, {\n          id: 2,\n          text: \"Take the map to the village elder for advice\"\n        }]\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      return mockStory;\n    } catch (error) {\n      console.error('Error generating story:', error);\n      throw error;\n    }\n  }\n\n  // Continue a story based on user choice\n  static async continueStory(currentStory, choiceId, childAge) {\n    try {\n      // Get age-based settings\n      const ageSettings = AgeCustomizationService.getAgeSettings(childAge);\n\n      // In a real implementation, we would call the Gemini API\n      // For now, we'll return a mock continuation\n      console.log('Continuing story with choice:', choiceId);\n      console.log('Age settings:', ageSettings);\n\n      // Mock story continuation\n      const continuations = {\n        1: {\n          content: \"The forest was filled with glowing flowers and talking animals. A wise owl landed on a branch nearby and offered to guide our hero on their journey.\",\n          choices: [{\n            id: 3,\n            text: \"Accept the owl's guidance\"\n          }, {\n            id: 4,\n            text: \"Decide to explore alone\"\n          }]\n        },\n        2: {\n          content: \"The village elder examined the map carefully and explained that it was a treasure map from ancient times. The treasure could help the whole village, but the journey would be dangerous.\",\n          choices: [{\n            id: 5,\n            text: \"Embark on the dangerous journey\"\n          }, {\n            id: 6,\n            text: \"Ask friends to join the adventure\"\n          }]\n        }\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      return continuations[choiceId] || continuations[1];\n    } catch (error) {\n      console.error('Error continuing story:', error);\n      throw error;\n    }\n  }\n}\nexport default StoryService;","map":{"version":3,"names":["API_CONFIG","AgeCustomizationService","StoryService","generateStory","storySettings","ageSettings","getAgeSettings","childAge","console","log","mockStory","title","childName","content","choices","id","text","Promise","resolve","setTimeout","error","continueStory","currentStory","choiceId","continuations"],"sources":["D:/Games/ProjectGitHub/StorySprout/src/services/StoryService.js"],"sourcesContent":["import API_CONFIG from './apiConfig';\nimport AgeCustomizationService from './AgeCustomizationService';\n\nclass StoryService {\n  // Generate a story based on user preferences\n  static async generateStory(storySettings) {\n    try {\n      // Get age-based settings\n      const ageSettings = AgeCustomizationService.getAgeSettings(storySettings.childAge);\n      \n      // In a real implementation, we would call the Gemini API with these settings\n      // For now, we'll return a mock story\n      console.log('Generating story with settings:', storySettings);\n      console.log('Age settings:', ageSettings);\n      \n      // Mock story data\n      const mockStory = {\n        title: `The Brave Little ${storySettings.childName || 'Explorer'}`,\n        content: \"Once upon a time, in a land filled with wonder, there lived a brave little adventurer. This character loved to explore and learn new things every day. One morning, they woke up to find a mysterious map under their pillow.\",\n        choices: [\n          { id: 1, text: \"Follow the map to the Enchanted Forest\" },\n          { id: 2, text: \"Take the map to the village elder for advice\" }\n        ]\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      return mockStory;\n    } catch (error) {\n      console.error('Error generating story:', error);\n      throw error;\n    }\n  }\n  \n  // Continue a story based on user choice\n  static async continueStory(currentStory, choiceId, childAge) {\n    try {\n      // Get age-based settings\n      const ageSettings = AgeCustomizationService.getAgeSettings(childAge);\n      \n      // In a real implementation, we would call the Gemini API\n      // For now, we'll return a mock continuation\n      console.log('Continuing story with choice:', choiceId);\n      console.log('Age settings:', ageSettings);\n      \n      // Mock story continuation\n      const continuations = {\n        1: {\n          content: \"The forest was filled with glowing flowers and talking animals. A wise owl landed on a branch nearby and offered to guide our hero on their journey.\",\n          choices: [\n            { id: 3, text: \"Accept the owl's guidance\" },\n            { id: 4, text: \"Decide to explore alone\" }\n          ]\n        },\n        2: {\n          content: \"The village elder examined the map carefully and explained that it was a treasure map from ancient times. The treasure could help the whole village, but the journey would be dangerous.\",\n          choices: [\n            { id: 5, text: \"Embark on the dangerous journey\" },\n            { id: 6, text: \"Ask friends to join the adventure\" }\n          ]\n        }\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      return continuations[choiceId] || continuations[1];\n    } catch (error) {\n      console.error('Error continuing story:', error);\n      throw error;\n    }\n  }\n}\n\nexport default StoryService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AACpC,OAAOC,uBAAuB,MAAM,2BAA2B;AAE/D,MAAMC,YAAY,CAAC;EACjB;EACA,aAAaC,aAAaA,CAACC,aAAa,EAAE;IACxC,IAAI;MACF;MACA,MAAMC,WAAW,GAAGJ,uBAAuB,CAACK,cAAc,CAACF,aAAa,CAACG,QAAQ,CAAC;;MAElF;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEL,aAAa,CAAC;MAC7DI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,WAAW,CAAC;;MAEzC;MACA,MAAMK,SAAS,GAAG;QAChBC,KAAK,EAAE,oBAAoBP,aAAa,CAACQ,SAAS,IAAI,UAAU,EAAE;QAClEC,OAAO,EAAE,+NAA+N;QACxOC,OAAO,EAAE,CACP;UAAEC,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAyC,CAAC,EACzD;UAAED,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE;QAA+C,CAAC;MAEnE,CAAC;;MAED;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,OAAOR,SAAS;IAClB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaC,aAAaA,CAACC,YAAY,EAAEC,QAAQ,EAAEhB,QAAQ,EAAE;IAC3D,IAAI;MACF;MACA,MAAMF,WAAW,GAAGJ,uBAAuB,CAACK,cAAc,CAACC,QAAQ,CAAC;;MAEpE;MACA;MACAC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEc,QAAQ,CAAC;MACtDf,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,WAAW,CAAC;;MAEzC;MACA,MAAMmB,aAAa,GAAG;QACpB,CAAC,EAAE;UACDX,OAAO,EAAE,sJAAsJ;UAC/JC,OAAO,EAAE,CACP;YAAEC,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAA4B,CAAC,EAC5C;YAAED,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAA0B,CAAC;QAE9C,CAAC;QACD,CAAC,EAAE;UACDH,OAAO,EAAE,0LAA0L;UACnMC,OAAO,EAAE,CACP;YAAEC,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAkC,CAAC,EAClD;YAAED,EAAE,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAoC,CAAC;QAExD;MACF,CAAC;;MAED;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,OAAOM,aAAa,CAACD,QAAQ,CAAC,IAAIC,aAAa,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAelB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}