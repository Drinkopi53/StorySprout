{"ast":null,"code":"class SharingService {\n  // Share a story via email\n  static async shareViaEmail(storyId, storyTitle, recipientEmail) {\n    try {\n      // In a real implementation, we would call an email API\n      console.log(`Sharing story \"${storyTitle}\" with ${recipientEmail}`);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true,\n        message: `Story shared with ${recipientEmail}`\n      };\n    } catch (error) {\n      console.error('Error sharing via email:', error);\n      throw error;\n    }\n  }\n\n  // Share a story via social media\n  static async shareViaSocialMedia(storyId, storyTitle, platform) {\n    try {\n      // In a real implementation, we would integrate with social media APIs\n      console.log(`Sharing story \"${storyTitle}\" on ${platform}`);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true,\n        message: `Story shared on ${platform}`\n      };\n    } catch (error) {\n      console.error('Error sharing via social media:', error);\n      throw error;\n    }\n  }\n\n  // Generate a shareable link for a story\n  static generateShareableLink(storyId) {\n    // In a real implementation, this would generate a unique URL\n    return `${window.location.origin}/shared-story/${storyId}`;\n  }\n\n  // Copy shareable link to clipboard\n  static copyToClipboard(text) {\n    navigator.clipboard.writeText(text).then(() => {\n      console.log('Link copied to clipboard');\n    }).catch(err => {\n      console.error('Failed to copy link: ', err);\n    });\n  }\n}\nexport default SharingService;","map":{"version":3,"names":["SharingService","shareViaEmail","storyId","storyTitle","recipientEmail","console","log","Promise","resolve","setTimeout","success","message","error","shareViaSocialMedia","platform","generateShareableLink","window","location","origin","copyToClipboard","text","navigator","clipboard","writeText","then","catch","err"],"sources":["D:/Games/ProjectGitHub/StorySprout/src/services/SharingService.js"],"sourcesContent":["class SharingService {\n  // Share a story via email\n  static async shareViaEmail(storyId, storyTitle, recipientEmail) {\n    try {\n      // In a real implementation, we would call an email API\n      console.log(`Sharing story \"${storyTitle}\" with ${recipientEmail}`);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return { success: true, message: `Story shared with ${recipientEmail}` };\n    } catch (error) {\n      console.error('Error sharing via email:', error);\n      throw error;\n    }\n  }\n  \n  // Share a story via social media\n  static async shareViaSocialMedia(storyId, storyTitle, platform) {\n    try {\n      // In a real implementation, we would integrate with social media APIs\n      console.log(`Sharing story \"${storyTitle}\" on ${platform}`);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return { success: true, message: `Story shared on ${platform}` };\n    } catch (error) {\n      console.error('Error sharing via social media:', error);\n      throw error;\n    }\n  }\n  \n  // Generate a shareable link for a story\n  static generateShareableLink(storyId) {\n    // In a real implementation, this would generate a unique URL\n    return `${window.location.origin}/shared-story/${storyId}`;\n  }\n  \n  // Copy shareable link to clipboard\n  static copyToClipboard(text) {\n    navigator.clipboard.writeText(text)\n      .then(() => {\n        console.log('Link copied to clipboard');\n      })\n      .catch(err => {\n        console.error('Failed to copy link: ', err);\n      });\n  }\n}\n\nexport default SharingService;"],"mappings":"AAAA,MAAMA,cAAc,CAAC;EACnB;EACA,aAAaC,aAAaA,CAACC,OAAO,EAAEC,UAAU,EAAEC,cAAc,EAAE;IAC9D,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,kBAAkBH,UAAU,UAAUC,cAAc,EAAE,CAAC;;MAEnE;MACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE,qBAAqBP,cAAc;MAAG,CAAC;IAC1E,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaC,mBAAmBA,CAACX,OAAO,EAAEC,UAAU,EAAEW,QAAQ,EAAE;IAC9D,IAAI;MACF;MACAT,OAAO,CAACC,GAAG,CAAC,kBAAkBH,UAAU,QAAQW,QAAQ,EAAE,CAAC;;MAE3D;MACA,MAAM,IAAIP,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE,mBAAmBG,QAAQ;MAAG,CAAC;IAClE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,OAAOG,qBAAqBA,CAACb,OAAO,EAAE;IACpC;IACA,OAAO,GAAGc,MAAM,CAACC,QAAQ,CAACC,MAAM,iBAAiBhB,OAAO,EAAE;EAC5D;;EAEA;EACA,OAAOiB,eAAeA,CAACC,IAAI,EAAE;IAC3BC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC,CAChCI,IAAI,CAAC,MAAM;MACVnB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;MACZrB,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEc,GAAG,CAAC;IAC7C,CAAC,CAAC;EACN;AACF;AAEA,eAAe1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}