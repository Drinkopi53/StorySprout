{"ast":null,"code":"class UserProfileService {\n  // Get user profile data\n  static async getProfile() {\n    try {\n      // In a real implementation, this would fetch from an API or local storage\n      console.log('Fetching user profile');\n\n      // Mock user profile data\n      const mockProfile = {\n        id: 1,\n        name: \"Parent Name\",\n        email: \"parent@example.com\",\n        children: [{\n          id: 1,\n          name: \"Child 1\",\n          age: \"6-8\",\n          interests: [\"animals\", \"adventure\"],\n          learningGoals: [\"vocabulary\", \"problem-solving\"]\n        }, {\n          id: 2,\n          name: \"Child 2\",\n          age: \"3-5\",\n          interests: [\"colors\", \"shapes\"],\n          learningGoals: [\"basic vocabulary\", \"emotions\"]\n        }]\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return mockProfile;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  }\n\n  // Update user profile data\n  static async updateProfile(profileData) {\n    try {\n      // In a real implementation, this would send data to an API\n      console.log('Updating user profile:', profileData);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true,\n        message: \"Profile updated successfully\"\n      };\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n\n  // Add a new child to the profile\n  static async addChild(childData) {\n    try {\n      // In a real implementation, this would send data to an API\n      console.log('Adding new child:', childData);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        success: true,\n        message: \"Child added successfully\",\n        childId: Date.now()\n      };\n    } catch (error) {\n      console.error('Error adding child:', error);\n      throw error;\n    }\n  }\n}\nexport default UserProfileService;","map":{"version":3,"names":["UserProfileService","getProfile","console","log","mockProfile","id","name","email","children","age","interests","learningGoals","Promise","resolve","setTimeout","error","updateProfile","profileData","success","message","addChild","childData","childId","Date","now"],"sources":["D:/Games/ProjectGitHub/StorySprout/src/services/UserProfileService.js"],"sourcesContent":["class UserProfileService {\n  // Get user profile data\n  static async getProfile() {\n    try {\n      // In a real implementation, this would fetch from an API or local storage\n      console.log('Fetching user profile');\n      \n      // Mock user profile data\n      const mockProfile = {\n        id: 1,\n        name: \"Parent Name\",\n        email: \"parent@example.com\",\n        children: [\n          {\n            id: 1,\n            name: \"Child 1\",\n            age: \"6-8\",\n            interests: [\"animals\", \"adventure\"],\n            learningGoals: [\"vocabulary\", \"problem-solving\"]\n          },\n          {\n            id: 2,\n            name: \"Child 2\",\n            age: \"3-5\",\n            interests: [\"colors\", \"shapes\"],\n            learningGoals: [\"basic vocabulary\", \"emotions\"]\n          }\n        ]\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return mockProfile;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  }\n  \n  // Update user profile data\n  static async updateProfile(profileData) {\n    try {\n      // In a real implementation, this would send data to an API\n      console.log('Updating user profile:', profileData);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return { success: true, message: \"Profile updated successfully\" };\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n  \n  // Add a new child to the profile\n  static async addChild(childData) {\n    try {\n      // In a real implementation, this would send data to an API\n      console.log('Adding new child:', childData);\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return { success: true, message: \"Child added successfully\", childId: Date.now() };\n    } catch (error) {\n      console.error('Error adding child:', error);\n      throw error;\n    }\n  }\n}\n\nexport default UserProfileService;"],"mappings":"AAAA,MAAMA,kBAAkB,CAAC;EACvB;EACA,aAAaC,UAAUA,CAAA,EAAG;IACxB,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;MAEpC;MACA,MAAMC,WAAW,GAAG;QAClBC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,aAAa;QACnBC,KAAK,EAAE,oBAAoB;QAC3BC,QAAQ,EAAE,CACR;UACEH,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,SAAS;UACfG,GAAG,EAAE,KAAK;UACVC,SAAS,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;UACnCC,aAAa,EAAE,CAAC,YAAY,EAAE,iBAAiB;QACjD,CAAC,EACD;UACEN,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,SAAS;UACfG,GAAG,EAAE,KAAK;UACVC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;UAC/BC,aAAa,EAAE,CAAC,kBAAkB,EAAE,UAAU;QAChD,CAAC;MAEL,CAAC;;MAED;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAOT,WAAW;IACpB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaC,aAAaA,CAACC,WAAW,EAAE;IACtC,IAAI;MACF;MACAf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEc,WAAW,CAAC;;MAElD;MACA,MAAM,IAAIL,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEK,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAA+B,CAAC;IACnE,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaK,QAAQA,CAACC,SAAS,EAAE;IAC/B,IAAI;MACF;MACAnB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEkB,SAAS,CAAC;;MAE3C;MACA,MAAM,IAAIT,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;MAEtD,OAAO;QAAEK,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE,0BAA0B;QAAEG,OAAO,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC;IACpF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAef,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}